public class StrategyPattern {
    
    public static void doStuff(){
        Animal sparky = new Dog();
        Animal tweety = new Bird();
        
        System.debug('Dog:  ' + sparky.tryToFly());
        System.debug('Bird:  ' + tweety.tryToFly());
        
        sparky.flyingType = new ItFlys();
        System.debug('Dog After:  ' + sparky.tryToFly());

    }
    
    public class Dog extends Animal{
        public Dog(){
            super();
            setSound('Bark');
            flyingType = new CantFly();
        }
        
        public void digHole(){
            System.debug('Dug a hole');
        }
    }
    
    public class Bird extends Animal{
        public Bird(){
            super();
            setSound('Tweet');
            flyingType = new ItFlys();
        }
    }
    
    public virtual class Animal {
        private String name;
        private Double height;
        private Integer weight;
        private String favFood;
        private double speed;
        private String sound;
         
        public Flys flyingType;
         
        public void setName(String newName){ name = newName; }
        public String getName(){ return name; }
         
        public void setHeight(Double newHeight){ height = newHeight; }
        public Double getHeight(){ return height; }
         
        public void setWeight(Integer newWeight){
            if (newWeight > 0){
                weight = newWeight;
            } else {
                System.debug('Weight must be bigger than 0');
            }
        }
        public Double getWeight(){ return weight; }
         
        public void setFavFood(String newFavFood){ favFood = newFavFood; }
        public String getFavFood(){ return favFood; }
         
        public void setSpeed(Double newSpeed){ speed = newSpeed; }
        public Double getSpeed(){ return speed; }
         
        public void setSound(String newSound){ sound = newSound; }
        public String getSound(){ return sound; }
         
        public String tryToFly(){
            return flyingType.fly();
        }
         
        public void setFlyingAbility(Flys newFlyType){
            flyingType = newFlyType;
        }
    }
    
    public interface Flys{
        String fly();
    }
    
    public class ItFlys implements Flys{
        public String fly(){
            return 'Flying High';
        }
    }

    public class CantFly implements Flys{
        public String fly(){
            return 'I can\'t fly';
        }
    }
}
